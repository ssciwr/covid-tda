# Build hamming library
add_library(hamming STATIC hamming.cc hamming_impl.cc)
target_include_directories(hamming PUBLIC ../include)
target_link_libraries(hamming PUBLIC CpuFeatures::cpu_features)
if(HAMMING_WITH_OPENMP)
  find_package(OpenMP REQUIRED)
  target_compile_definitions(hamming PUBLIC HAMMING_WITH_OPENMP)
  target_link_libraries(hamming PUBLIC OpenMP::OpenMP_CXX)
endif()

# compile optional SIMD code as separate libraries which can be used at runtime
# if there is CPU support
if(HAMMING_WITH_SSE2)
  target_compile_definitions(hamming PUBLIC HAMMING_WITH_SSE2)
  add_library(distance_sse2 STATIC distance_sse2.cc)
  target_compile_options(distance_sse2 PRIVATE -msse2)
  target_include_directories(distance_sse2 PUBLIC ../include)
  target_link_libraries(hamming PRIVATE distance_sse2)
endif()

if(HAMMING_WITH_AVX2)
  target_compile_definitions(hamming PUBLIC HAMMING_WITH_AVX2)
  add_library(distance_avx2 STATIC distance_avx2.cc)
  target_compile_options(distance_avx2 PRIVATE -mavx2)
  target_include_directories(distance_avx2 PUBLIC ../include)
  target_link_libraries(hamming PRIVATE distance_avx2)
endif()

if(HAMMING_WITH_AVX512)
  target_compile_definitions(hamming PUBLIC HAMMING_WITH_AVX512)
  add_library(distance_avx512 STATIC distance_avx512.cc)
  target_compile_options(distance_avx512 PRIVATE -mavx512bw)
  target_include_directories(distance_avx512 PUBLIC ../include)
  target_link_libraries(hamming PRIVATE distance_avx512)
endif()

# Build library benchmarks
if(HAMMING_BUILD_BENCHMARKS)
  add_executable(bench bench.cc hamming_bench.cc hamming_impl_bench.cc)
  if(HAMMING_WITH_SSE2)
    target_sources(bench PRIVATE distance_sse2_bench.cc)
    target_link_libraries(bench PRIVATE distance_sse2)
  endif()
  if(HAMMING_WITH_AVX2)
    target_sources(bench PRIVATE distance_avx2_bench.cc)
    target_link_libraries(bench PRIVATE distance_avx2)
  endif()
  if(HAMMING_WITH_AVX512)
    target_sources(bench PRIVATE distance_avx512_bench.cc)
    target_link_libraries(bench PRIVATE distance_avx512)
  endif()
  target_link_libraries(bench PRIVATE hamming benchmark::benchmark
                                      CpuFeatures::cpu_features)
endif()

# Build tests
if(BUILD_TESTING)
  include(../ext/Catch2/contrib/Catch.cmake)
  add_executable(tests tests.cc hamming_t.cc hamming_impl_t.cc)
  if(HAMMING_WITH_SSE2)
    target_sources(tests PRIVATE distance_sse2_t.cc)
    target_link_libraries(tests PRIVATE distance_sse2)
  endif()
  if(HAMMING_WITH_AVX2)
    target_sources(tests PRIVATE distance_avx2_t.cc)
    target_link_libraries(tests PRIVATE distance_avx2)
  endif()
  if(HAMMING_WITH_AVX512)
    target_sources(tests PRIVATE distance_avx512_t.cc)
    target_link_libraries(tests PRIVATE distance_avx512)
  endif()
  target_link_libraries(tests PRIVATE hamming Catch2::Catch2
                                      CpuFeatures::cpu_features)
  catch_discover_tests(tests)
endif()
